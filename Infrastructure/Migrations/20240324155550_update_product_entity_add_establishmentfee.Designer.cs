// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240324155550_update_product_entity_add_establishmentfee")]
    partial class update_product_entity_add_establishmentfee
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Blacklists.BlacklistedEmailDomain", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BlacklistedEmailDomains");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b3d8fe81-4db9-417e-bd49-01a877fbc1d0"),
                            Value = "test.com"
                        },
                        new
                        {
                            Id = new Guid("7f0dc9c8-21a0-46c1-ba10-77337298209b"),
                            Value = "hotmail.com"
                        },
                        new
                        {
                            Id = new Guid("b1b387bf-f98c-4eab-ad3b-5fc571abe6bb"),
                            Value = "blackmail.com"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Blacklists.BlacklistedMobileNumber", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BlacklistedMobileNumbers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1173c7e6-02e5-4089-b189-bddde36a59e7"),
                            Value = "09123456789"
                        },
                        new
                        {
                            Id = new Guid("df13aaa4-c796-4859-9f24-cbbbebe1bf86"),
                            Value = "09987654321"
                        },
                        new
                        {
                            Id = new Guid("8297a80d-ada4-4e9b-acd5-caa6441ad457"),
                            Value = "12312312312"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Customers.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RedirectURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Domain.Entities.LoanApplications.LoanApplicaton", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Interest")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("InterestRate")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("Repayment")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("RepaymentFrequency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalRepayments")
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("LoanApplicatons");
                });

            modelBuilder.Entity("Domain.Entities.Loans.Loan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AmountRequired")
                        .HasColumnType("int");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Term")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("TermInMonths")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("Loans");
                });

            modelBuilder.Entity("Domain.Entities.Product.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("EstablishmentFee")
                        .HasColumnType("int");

                    b.Property<int>("MinimumDuration")
                        .HasColumnType("int");

                    b.Property<int>("MonthsOfFreeInterest")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("PerAnnumInterestRate")
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cbd45508-0a66-41ef-a424-6e14e1a6fb50"),
                            EstablishmentFee = 300,
                            MinimumDuration = 1,
                            MonthsOfFreeInterest = 0,
                            Name = "Product A",
                            PerAnnumInterestRate = 0m
                        },
                        new
                        {
                            Id = new Guid("d1a7ca5f-6f67-4600-9e01-19758c70fc09"),
                            EstablishmentFee = 300,
                            MinimumDuration = 6,
                            MonthsOfFreeInterest = 2,
                            Name = "Product B",
                            PerAnnumInterestRate = 9.20m
                        },
                        new
                        {
                            Id = new Guid("cf1b644a-0c76-4c3b-b577-70374d8edc21"),
                            EstablishmentFee = 300,
                            MinimumDuration = 1,
                            MonthsOfFreeInterest = 0,
                            Name = "Product C",
                            PerAnnumInterestRate = 10.58m
                        });
                });

            modelBuilder.Entity("Domain.Entities.LoanApplications.LoanApplicaton", b =>
                {
                    b.HasOne("Domain.Entities.Customers.Customer", null)
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Loans.Loan", b =>
                {
                    b.HasOne("Domain.Entities.Customers.Customer", "Customer")
                        .WithOne("Loan")
                        .HasForeignKey("Domain.Entities.Loans.Loan", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Domain.Entities.Customers.Customer", b =>
                {
                    b.Navigation("Loan")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
